/*
Created by AMEN-ProgCorps Development Team
This code is Open Source meaning anyone has
access and free modify its Code Structure

- MacCloudGZ(2025)
txtfile created on 13/04/2025 15:43 UTC
*/

-- Database Creation 
CREATE DATABASE convenience_store_post;

USE convenience_store_post;

-- Discounts table 
CREATE TABLE discounts (
    discount_id INT PRIMARY KEY,
    valid_from DATE NOT NULL,
    valid_till DATE NOT NULL,
    description VARCHAR(250) NOT NULL,
    discount_percentage DECIMAL(5,2) NOT NULL
)

-- category table
CREATE TABLE categories (
    category_id INT PRIMARY KEY,
    name VARCHAR(50) NOT NULL
);

--Product table
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    category_id INT,
    name VARCHAR(50) NOT NULL,
    stock_level INT NOT NULL,
    price DECIMAL(10,5) NOT NULL,
    
    FOREIGN KEY (category_id) REFERENCES categories(category_id);
)

-- Account areas 

-- functions as a trigger to auto-generate customer_id
-- by taking the max value of customer_id and adding 
-- 1 to it while also placing C in the firsts char
-- to identify it as a Customer
CREATE TABLE customer_accounts (
    customer_id VARCHAR(10) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    phone_number VARCHAR(15) NOT NULL,
    email VARCHAR(100) NOT NULL
);

DELIMITER $$

CREATE TRIGGER before_insert_customer_accounts
BEFORE INSERT ON customer_accounts
FOR EACH ROW
BEGIN
    DECLARE next_id INT;
    SELECT COALESCE(MAX(CAST(SUBSTRING(customer_id, 2) AS UNSIGNED)), 100) + 1 INTO next_id FROM customer_accounts;
    SET NEW.customer_id = CONCAT('C', next_id);
END$$

DELIMITER ;

INSERT INTO customer_accounts (customer_id, name, password, phone_number, email)
VALUES ('C100', 'John Doe', 'password123', '1234567890', '000000', 'guest');

-- same as above but for employee accounts
-- but the character E is used to identify it as an employee
-- and the employee_id is auto-generated by taking the max value of employee_id and adding 1 to it

CREATE TABLE employee_accounts (
    employee_id VARCHAR(10) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    role ENUM('Admin', 'Cashier', 'Manager') NOT NULL,
    store_name VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL
);

DELIMITER $$

CREATE TRIGGER before_insert_employee_accounts
BEFORE INSERT ON employee_accounts
FOR EACH ROW
BEGIN
    DECLARE next_id INT;
    SELECT COALESCE(MAX(CAST(SUBSTRING(employee_id, 2) AS UNSIGNED)), 0) + 1 INTO next_id FROM employee_accounts;
    SET NEW.employee_id = CONCAT('E', next_id);
END$$

DELIMITER ;

-- this one is view for all accounts that is recorded in the systems
CREATE VIEW all_accounts AS
SELECT customer_id, name, phone_number, email FROM customer_accounts
UNION ALL
SELECT employee_id, name, phone_number, email FROM employee_accounts;
-- for experiemntal purposes ill use this one as a login feature for the system

-- This table is for Tracking the sales made by each employee
CREATE TABLE inventory_records (
    record_id INT PRIMARY KEY AUTO_INCREMENT,
    product_id INT,
    employee_id VARCHAR(10),
    quantity_change INT NOT NULL,
    change_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    FOREIGN KEY (employee_id) REFERENCES employee_accounts(employee_id)
)
-- Here the table for the orders that are made by customers
CREATE TABLE order (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id VARCHAR(10),
    order_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    total_amount DECIMAL(10,5) NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customer_accounts(customer_id)
)

-- Here for RECORDS on items that comes an go in customers usage
CREATE TABLE order_item (
    order_id INT,
    product_id INT,
    discount_id INT,
    total_ammount DECIMAL(10,5) NOT NULL,
    quantity INT NOT NULL,
    unit_price DECIMAL(10,5) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES order(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id),
    FOREIGN KEY (discount_id) REFERENCES discounts(discount_id)
)



/*
    below is for Experimental Purposes
    delete anycode that is within this point so 
    the size can overlap with the rest of the code
    and the code can be runned without any errors
*/
 

-- Users Table Creation
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) NOT NULL,
    verification BOOLEAN NOT NULL DEFAULT 0,
    dateregistered DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Insert Guest Data
INSERT INTO users (username, password, email, verification, dateregistered)
VALUES ('guest', '', 'guest@example.com', 0, CURDATE());

--Users Verification Table
CREATE TABLE verification_token (
    id INT PRIMARY KEY,
    verification_token VARCHAR(255) NOT NULL,
    FOREIGN KEY (id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE account_ip (
    id INT NOT NULL,
    ip_address VARCHAR(45) NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (id) REFERENCES users(id) ON DELETE CASCADE
);
